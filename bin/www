#!/usr/bin/env node

/**
 * Get config variables from the .env file
 */

require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web-development-2-project:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}


/**
 * Listen on socket io
 */
var io = require("socket.io")(server);

// Send current time to all connected clients
function sendTime() {
    io.emit('time', { time: new Date().toJSON() });
}

// Send current time every 10 secs
setInterval(sendTime, 10000);


io.on('connection', function (socket) {
    const Chat = require('../models/chat');
    const User = require('../models/user');
    const Message = require('../models/message');
    console.log('a user connected');
    socket.emit('server-message', 'You are connected!');
    socket.on('disconnect', function(){
        console.log('user disconnected');
    });
    socket.on('message', function (data) {

        // Define variables from parameters
        var content = data.message;
        var chatId = data.chatId;
        var userId = data.userId;

        // Init global variables for later
        var chat = null;
        var user = null;

        // Get all data
        getChat = function(_callback) {
            Chat.findById(chatId, function (err, nChat) {
                chat = nChat; // Set chat data as a variable for the chat
                _callback(); // Callback - To be sure that all data's got loaded, because of an Async task
            });
        };

        getUser = function(_callback) {
            User.findById(userId, function (err, nUser) {
                user = nUser; // Set chat data as a variable for the chat
                _callback(); // Callback - To be sure that all data's got loaded, because of an Async task
            });
        };

        saveMessage = function (_callback) {
            var message = new Message({
                content: content,
                user: user
            });
            message.save();
            var messages = chat.messages;
            messages.push(message);
            chat.messages = messages;
            chat.save();
            _callback();
        };

        function sendMsg() {
            getChat(function () {
                getUser(function () {
                    saveMessage(function () {
                    });
                    // Feed chat with new data
                    var newData = {"message": content, "chat": chat, "user": user};

                    // Send to "chat message" listener
                    socket.emit('chat message', newData);

                    // Send to all users
                    socket.broadcast.emit('chat message', newData);

                    // DEBUG
                    console.log("Following message got send: ");
                    console.log(newData);
                });
            });
        }

        sendMsg(); // Initialize function for getting chat and user data and send it to all sockets
    });
});