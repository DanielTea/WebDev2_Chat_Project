#!/usr/bin/env node

/**
 * Get config variables from the .env file
 */

require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web-development-2-project:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}


/**
 * Listen on socket io
 */
var io = require("socket.io")(server);

/**
 * Send current time to all connected clients
 */
function sendTime() {
    io.emit('time', {
        time: new Date().toJSON()
    });
}

/**
 * Send current time every 10 secs
 */
setInterval(sendTime, 10000);

const Chat = require('../models/chat');
const Tag = require('../models/tag');
const User = require('../models/user');
const Message = require('../models/message');

io.on('connection', function (socket) {
    console.log('socket: user connected');

    var rooms = [];

    socket.on('disconnect', function () {
        console.log('socket: user disconnected');
    });

    socket.on('subscribe', function (data) {
        socket.join(data.room);
        socket.broadcast.to(data.room).emit('server-message', 'A new client connected');
        socket.emit('server-message', 'You are now connected');
        rooms.push(data.room);
    });

    socket.on('unsubscribe', function (data) {
        socket.leave(data.room);
    });

    socket.on('unsubscribe-all', function (data) {
        rooms.forEach((room) => socket.leave(room));
    });

    socket.on('chat-message', function (data) {
        rooms.forEach((room) => {
            Chat.findById(room, (err, chat) => {
                if (err) {
                    console.log(err);
                    return socket.emit('server-message', 'Unknown chat, not sending your message');
                }
                User.findById(data.userId, function (err, user) {
                    if (err) {
                        console.log(err);
                        return socket.emit('server-message', 'Unknown user, not sending your message');
                    }
                    var message = new Message({
                        content: data.content,
                        user: user
                    });
                    message.save();
                    chat.messages.push(message);
                    chat.save();
                    var socketMessage = {
                        content: data.content,
                        user: {
                            _id: user._id,
                            firstName: user.firstName,
                            lastName: user.lastName
                        },
                        createdAt: new Date()
                    };
                    socket.emit('chat-message', socketMessage);
                    socket.broadcast.to(room).emit('chat-message', socketMessage);
                });
            });
        });
    });

    socket.on('tag-message', function (data) {
        rooms.forEach((room) => {
            Tag.findById(room, (err, tag) => {
                if (err) {
                    console.log(err);
                    return socket.emit('server-message', 'Unknown tag, not sending your message');
                }
                User.findById(data.userId, function (err, user) {
                    if (err) {
                        console.log(err);
                        return socket.emit('server-message', 'Unknown user, not sending your message');
                    }
                    var message = new Message({
                        content: data.content,
                        user: user
                    });
                    message.save();
                    tag.messages.push(message);
                    tag.save();
                    var socketMessage = {
                        content: data.content,
                        user: {
                            _id: user._id,
                            firstName: user.firstName,
                            lastName: user.lastName
                        },
                        createdAt: new Date()
                    };
                    socket.emit('tag-message', socketMessage);
                    socket.broadcast.to(room).emit('tag-message', socketMessage);
                });
            });
        });
    });
});
